FROM ubuntu:20.04

# Set to noninteractive to fix issue with tzdate
ARG DEBIAN_FRONTEND=noninteractive
ENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib:/usr/local/lib/x86_64-linux-gnu/

# Install Dependencies
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        pkg-config \
        git \
        curl \
        python3 \
        python3-pip \
        python3-setuptools \
        python3-wheel \
        python3-docutils \
        doxygen \
        build-essential \
        ninja-build \
        nasm \
        yasm \
        libnuma1 \
        libgl1-mesa-glx \
        cmake \
        libass-dev \
        autoconf \
        openssl \
        libssl-dev \
        automake \
        libtool \
        libevent-dev \
        libjpeg-dev \
        libgif-dev \
        libpng-dev \
        libwebp-dev \
        libmemcached-dev \
        imagemagick \
        libpython3-dev \
        libavformat-dev \
        libavcodec-dev \
        libswscale-dev \
        libavutil-dev \
        libswresample-dev \
        libdevil-dev \
        libx265-dev \
        libnuma-dev && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

RUN pip3 install --no-cache-dir meson

# Install libvmaf
COPY --from=registry.gitlab.com/luigi311/encoders-docker/aomenc:static-latest /vmaf /vmaf
WORKDIR /vmaf/libvmaf
RUN ninja -vC build install

# Install aomenc
COPY --from=registry.gitlab.com/luigi311/encoders-docker/aomenc:latest /aom /aom
COPY --from=registry.gitlab.com/luigi311/encoders-docker/aomenc:latest /aom_build /aom_build
WORKDIR /aom_build
RUN make install

# Install svt-av1
COPY --from=registry.gitlab.com/luigi311/encoders-docker/svt-av1:latest /SVT-AV1 /SVT-AV1
WORKDIR /SVT-AV1/Build/linux/Release
RUN make install

# Install Rust
RUN curl https://sh.rustup.rs -sSf | bash -s -- -y --default-toolchain nightly
ENV PATH="/root/.cargo/bin:$PATH"

# Install rav1e
COPY --from=registry.gitlab.com/luigi311/encoders-docker/rav1e:latest /rav1e /rav1e
WORKDIR /rav1e
RUN cargo install cargo-c && \
    cargo cinstall --library-type=staticlib --crt-static --release --prefix=/usr/local

# Install x265
COPY --from=registry.gitlab.com/luigi311/encoders-docker/x265:latest /x265 /x265
WORKDIR /x265/build/linux/8bit
RUN make install

# Install svt-hevc
COPY --from=registry.gitlab.com/luigi311/encoders-docker/svt-hevc:latest /SVT-HEVC /SVT-HEVC
WORKDIR /SVT-HEVC/Build/linux/Release
RUN make install

# Install x264
COPY --from=registry.gitlab.com/luigi311/encoders-docker/x264:latest /x264 /x264
WORKDIR /x264
RUN make install

# Install vpxenc
COPY --from=registry.gitlab.com/luigi311/encoders-docker/vpxenc:latest /vpxenc /vpxenc
COPY --from=registry.gitlab.com/luigi311/encoders-docker/vpxenc:latest /build /build
WORKDIR /build
RUN make install

# Build ffmpeg
RUN git clone git://source.ffmpeg.org/ffmpeg /ffmpeg
WORKDIR /ffmpeg
# Patch ffmpeg to use vmaf2.X
RUN curl https://gitlab.com/1480c1/SVT-AV1/-/raw/svt-ffmpeg/0001-avfilter-vf_libvmaf-update-filter-for-libvmaf-v2.0.0.patch --output 0001-avfilter-vf_libvmaf-update-filter-for-libvmaf-v2.0.0.patch && \
    patch -p1 < 0001-avfilter-vf_libvmaf-update-filter-for-libvmaf-v2.0.0.patch
RUN ./configure \
        --ld="g++" \
        --pkg-config-flags="--static" \
        --enable-static \
        --extra-cflags="-I/usr/local/include -I/usr/lib/include" \
        --extra-cxxflags="-I/usr/local/include -I/usr/lib/include" \
        --extra-ldflags="-L/usr/local/lib -L/usr/local/lib64 -L/usr/lib -L/usr/lib64" \
        --extra-libs=-pthread \
        --extra-libs=-lm \
        --extra-libs=-lpthread \
        --enable-gpl \
        --enable-version3 \
        --cc=gcc \
        --enable-librav1e \
        --enable-libx264 \
        --enable-libx265 \
        --enable-libvpx \
        --enable-libaom \
        --enable-libvmaf

RUN make -j"$(nproc)" && \
    make install

RUN /usr/local/bin/ffmpeg --help

ENTRYPOINT [ "/usr/local/bin/ffmpeg" ]
