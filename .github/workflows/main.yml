name: CI
on:
  push:
    paths-ignore:
      - .gitignore
      - "*.md"
  pull_request:
    paths-ignore:
      - .gitignore
      - "*.md"
env:
  DOCKER_USERNAME: luigi311

jobs:
  base:
    name: ${{ matrix.name }}
    runs-on: self-hosted
    strategy:
      fail-fast: false
      matrix:
        name: [aomenc, rav1e, svt-av1, svt-hevc, vpxenc, x264, x265]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        
      #- name: Slimdown
      #  run: |
      #    wget https://raw.githubusercontent.com/apache/flink/master/tools/azure-pipelines/free_disk_space.sh
      #    chmod +x free_disk_space.sh
      #    ./free_disk_space.sh

      - name: Docker meta
        id: docker_meta
        uses: docker/metadata-action@v3
        with:
          images: registry.gitlab.com/${{ env.DOCKER_USERNAME }}/encoders-docker/${{ matrix.name}}
          flavor: |
            latest=${{ github.ref == 'refs/heads/main' }}
          tags: |
            type=ref,event=branch,suffix=-latest
            type=schedule,pattern=-{{date 'YYYYMMDD'}}
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker
        id: login_docker
        env:
          DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}
        if: "${{ env.DOCKER_TOKEN != '' }}"
        uses: docker/login-action@v1
        with:
          registry: registry.gitlab.com
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build
        run: |
          docker build --compress --pull \
            -f Dockerfile.${{ matrix.name }} \
            -t ${{ steps.docker_meta.outputs.tags }} \
            "$PWD"
      
      - name: Push
        if: "${{ steps.login_docker.outcome == 'success' }}"
        run: |
          docker push ${{ steps.docker_meta.outputs.tags }}
    
    
    
  ffmpeg:
    name: ffmpeg
    runs-on: self-hosted
    needs: base
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        
      #- name: Slimdown
      #  run: |
      #    wget https://raw.githubusercontent.com/apache/flink/master/tools/azure-pipelines/free_disk_space.sh
      #    chmod +x free_disk_space.sh
      #    ./free_disk_space.sh
      
      - name: Create latest
        id: create_latest
        run: |
          REF="${{ github.ref }}"
          if [ "${REF}" == "refs/heads/main" ]; then
            echo "Main"
            LATESTVAR="latest"
          else
            if [ "${REF}" == "refs/tags/*" ]; then
              echo "Tag"
              LATESTVAR="${REF/refs\/tags\//}-latest"
            else
              echo "Other"
              LATESTVAR="${REF/refs\/heads\//}-latest"
            fi
          fi
          echo "${LATESTVAR}"
          echo ::set-output name=LATEST::${LATESTVAR}
          
      - name: Docker meta
        id: docker_meta
        uses: docker/metadata-action@v3
        with:
          images: registry.gitlab.com/${{ env.DOCKER_USERNAME }}/encoders-docker/ffmpeg
          flavor: |
            latest=${{ github.ref == 'refs/heads/main' }}
          tags: |
            type=ref,event=branch,suffix=-latest
            type=schedule,pattern=-{{date 'YYYYMMDD'}}
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker
        id: login_docker
        env:
          DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}
        if: "${{ env.DOCKER_TOKEN != '' }}"
        uses: docker/login-action@v1
        with:
          registry: registry.gitlab.com
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build
        run: |
          echo "${{ steps.create_latest.outputs.LATEST }}"
          sed -i 's/aomenc:latest/aomenc:'"${{ steps.create_latest.outputs.LATEST }}"'/g' Dockerfile.ffmpeg
          sed -i 's/svt-av1:latest/svt-av1:'"${{ steps.create_latest.outputs.LATEST }}"'/g' Dockerfile.ffmpeg
          sed -i 's/rav1e:latest/rav1e:'"${{ steps.create_latest.outputs.LATEST }}"'/g' Dockerfile.ffmpeg
          sed -i 's/x265:latest/x265:'"${{ steps.create_latest.outputs.LATEST }}"'/g' Dockerfile.ffmpeg
          sed -i 's/svt-hevc:latest/svt-hevc:'"${{ steps.create_latest.outputs.LATEST }}"'/g' Dockerfile.ffmpeg
          sed -i 's/x264:latest/x264:'"${{ steps.create_latest.outputs.LATEST }}"'/g' Dockerfile.ffmpeg
          sed -i 's/vpxenc:latest/vpxenc:'"${{ steps.create_latest.outputs.LATEST }}"'/g' Dockerfile.ffmpeg
          docker build --compress --pull \
            -f Dockerfile.ffmpeg \
            -t ${{ steps.docker_meta.outputs.tags }} \
            "$PWD"
      
      - name: Push
        if: "${{ steps.login_docker.outcome == 'success' }}"
        run: |
          docker push ${{ steps.docker_meta.outputs.tags }}
      
  tools:
    name: tools
    runs-on: self-hosted
    needs: ffmpeg
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        
      #- name: Slimdown
      #  run: |
      #    wget https://raw.githubusercontent.com/apache/flink/master/tools/azure-pipelines/free_disk_space.sh
      #    chmod +x free_disk_space.sh
      #    ./free_disk_space.sh
      
      - name: Create latest
        id: create_latest
        run: |
          REF="${{ github.ref }}"
          if [ "${REF}" == "refs/heads/main" ]; then
            echo "Main"
            LATESTVAR="latest"
          else
            if [ "${REF}" == "refs/tags/*" ]; then
              echo "Tag"
              LATESTVAR="${REF/refs\/tags\//}-latest"
            else
              echo "Other"
              LATESTVAR="${REF/refs\/heads\//}-latest"
            fi
          fi
          echo "${LATESTVAR}"
          echo ::set-output name=LATEST::${LATESTVAR}
          
      - name: Docker meta
        id: docker_meta
        uses: docker/metadata-action@v3
        with:
          images: registry.gitlab.com/${{ env.DOCKER_USERNAME }}/encoders-docker/tools
          flavor: |
            latest=${{ github.ref == 'refs/heads/main' }}
          tags: |
            type=ref,event=branch,suffix=-latest
            type=schedule,pattern=-{{date 'YYYYMMDD'}}
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker
        id: login_docker
        env:
          DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}
        if: "${{ env.DOCKER_TOKEN != '' }}"
        uses: docker/login-action@v1
        with:
          registry: registry.gitlab.com
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build
        run: |
          echo "${{ steps.create_latest.outputs.LATEST }}"
          sed -i 's/aomenc:latest/aomenc:'"${{ steps.create_latest.outputs.LATEST }}"'/g' Dockerfile.tools
          sed -i 's/svt-av1:latest/svt-av1:'"${{ steps.create_latest.outputs.LATEST }}"'/g' Dockerfile.tools
          sed -i 's/rav1e:latest/rav1e:'"${{ steps.create_latest.outputs.LATEST }}"'/g' Dockerfile.tools
          sed -i 's/x265:latest/x265:'"${{ steps.create_latest.outputs.LATEST }}"'/g' Dockerfile.tools
          sed -i 's/svt-hevc:latest/svt-hevc:'"${{ steps.create_latest.outputs.LATEST }}"'/g' Dockerfile.tools
          sed -i 's/x264:latest/x264:'"${{ steps.create_latest.outputs.LATEST }}"'/g' Dockerfile.tools
          sed -i 's/vpxenc:latest/vpxenc:'"${{ steps.create_latest.outputs.LATEST }}"'/g' Dockerfile.tools
          sed -i 's/ffmpeg:latest/ffmpeg:'"${{ steps.create_latest.outputs.LATEST }}"'/g' Dockerfile.tools

          
          docker build --compress --pull \
            -f Dockerfile.tools \
            -t ${{ steps.docker_meta.outputs.tags }} \
            "$PWD"
      
      - name: Push
        if: "${{ steps.login_docker.outcome == 'success' }}"
        run: |
          docker push ${{ steps.docker_meta.outputs.tags }} 
          
  deploy:
    name: deploy
    runs-on: self-hosted
    needs: tools
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        
      #- name: Slimdown
      #  run: |
      #    wget https://raw.githubusercontent.com/apache/flink/master/tools/azure-pipelines/free_disk_space.sh
      #    chmod +x free_disk_space.sh
      #    ./free_disk_space.sh
      
      - name: Create latest
        id: create_latest
        run: |
          REF="${{ github.ref }}"
          if [ "${REF}" == "refs/heads/main" ]; then
            echo "Main"
            LATESTVAR="latest"
          else
            if [ "${REF}" == "refs/tags/*" ]; then
              echo "Tag"
              LATESTVAR="${REF/refs\/tags\//}-latest"
            else
              echo "Other"
              LATESTVAR="${REF/refs\/heads\//}-latest"
            fi
          fi
          echo "${LATESTVAR}"
          echo ::set-output name=LATEST::${LATESTVAR}
          
      - name: Docker meta
        id: docker_meta
        uses: docker/metadata-action@v3
        with:
          images: registry.gitlab.com/${{ env.DOCKER_USERNAME }}/encoders-docker
          flavor: |
            latest=${{ github.ref == 'refs/heads/main' }}
          tags: |
            type=ref,event=branch,suffix=-latest
            type=schedule,pattern=-{{date 'YYYYMMDD'}}
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker
        id: login_docker
        env:
          DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}
        if: "${{ env.DOCKER_TOKEN != '' }}"
        uses: docker/login-action@v1
        with:
          registry: registry.gitlab.com
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build
        run: |
          echo "${{ steps.create_latest.outputs.LATEST }}"
          sed -i 's/aomenc:latest/aomenc:'"${{ steps.create_latest.outputs.LATEST }}"'/g' Dockerfile
          sed -i 's/svt-av1:latest/svt-av1:'"${{ steps.create_latest.outputs.LATEST }}"'/g' Dockerfile
          sed -i 's/rav1e:latest/rav1e:'"${{ steps.create_latest.outputs.LATEST }}"'/g' Dockerfile
          sed -i 's/x265:latest/x265:'"${{ steps.create_latest.outputs.LATEST }}"'/g' Dockerfile
          sed -i 's/svt-hevc:latest/svt-hevc:'"${{ steps.create_latest.outputs.LATEST }}"'/g' Dockerfile
          sed -i 's/x264:latest/x264:'"${{ steps.create_latest.outputs.LATEST }}"'/g' Dockerfile
          sed -i 's/vpxenc:latest/vpxenc:'"${{ steps.create_latest.outputs.LATEST }}"'/g' Dockerfile
          sed -i 's/ffmpeg:latest/ffmpeg:'"${{ steps.create_latest.outputs.LATEST }}"'/g' Dockerfile

          
          docker build --compress --pull \
            -f Dockerfile \
            -t ${{ steps.docker_meta.outputs.tags }} \
            "$PWD"
      
      - name: Push
        if: "${{ steps.login_docker.outcome == 'success' }}"
        run: |
          docker push ${{ steps.docker_meta.outputs.tags }} 
