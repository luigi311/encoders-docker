name: CI
on:
  push:
    paths-ignore:
      - .gitignore
      - "*.md"
  pull_request:
    paths-ignore:
      - .gitignore
      - "*.md"
env:
  DOCKER_USERNAME: luigi311

jobs:
  base:
    name: ${{ matrix.name }} ${{ matrix.enc }}
    runs-on: self-hosted
    strategy:
      fail-fast: false
      matrix:
        name: [aomenc]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        
      #- name: Slimdown
      #  run: |
      #    wget https://raw.githubusercontent.com/apache/flink/master/tools/azure-pipelines/free_disk_space.sh
      #    chmod +x free_disk_space.sh
      #    ./free_disk_space.sh

      - name: Docker meta
        id: docker_meta
        uses: docker/metadata-action@v3
        with:
          images: registry.gitlab.com/${{ env.DOCKER_USERNAME }}/encoders-docker/${{ matrix.name}}
          flavor: |
            latest=${{ github.ref == 'refs/heads/main' }}
          tags: |
            type=ref,event=branch,suffix=-{{date 'YYYYMMDD'}}
            type=schedule,pattern=-{{date 'YYYYMMDD'}}
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker
        id: login_docker
        env:
          DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}
        if: "${{ env.DOCKER_TOKEN != '' }}"
        uses: docker/login-action@v1
        with:
          registry: registry.gitlab.com
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build
        run: |
          docker build --compress --pull \
            -f Dockerfile.${{ matrix.name }} \
            -t ${{ steps.docker_meta.outputs.tags }} \
            "$PWD"
      
      - name: Push
        if: "${{ steps.login_docker.outcome == 'success' }}"
        run: |
          docker push ${{ steps.docker_meta.outputs.tags }}
      
      #- name: Build
      #  id: build
      #  if: "${{ steps.docker_meta.outcome == 'skipped' }}"
      #  uses: docker/build-push-action@v2
      #  with:
      #    context: .
      #    file: ./Dockerfile.${{ matrix.name }}
      #    push: false
      #    tags: registry.gitlab.com/luigi311/encoders-docker/${{ matrix.name}}:static-latest
      
      #- name: Build Push
      #  id: build_push
      #  if: "${{ steps.docker_meta.outcome == 'success' }}"
      #  uses: docker/build-push-action@v2
      #  with:
      #    context: .
      #    file: ./Dockerfile
      #    push: false
      #    tags: ${{ steps.docker_meta.outputs.tags }}
      #    labels: ${{ steps.docker_meta.outputs.labels }}

      # Echo digest so users can validate their image
      #- name: Image digest
      #  if: "${{ steps.docker_meta.outcome == 'success' }}"
      #  run: echo "${{ steps.build_push.outputs.digest }}"
    
    
    
    
  ffmpeg:
    name: ${{ matrix.name }} ${{ matrix.enc }}
    runs-on: ubuntu-latest
    needs: base
    strategy:
      fail-fast: false
      matrix:
        name: [ffmpeg]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        
      #- name: Slimdown
      #  run: |
      #    wget https://raw.githubusercontent.com/apache/flink/master/tools/azure-pipelines/free_disk_space.sh
      #    chmod +x free_disk_space.sh
      #    ./free_disk_space.sh
      
      - name: Create latest
        id: create_latest
        run: |
          if [ "${GITHUB_REF}" == "refs/heads/main" ]; then
            LATEST="latest"
          else
            if [ "${GITHUB_REF/refs\/tags\//}" != "" ]; then
              LATEST="${GITHUB_REF/refs\/tags\//}-latest"
            else
              LATEST="${GITHUB_REF/refs\/heads\//}-latest"
            fi
          fi
          echo ::set-output name=LATEST::${LATEST}
          
      - name: Docker meta
        id: docker_meta
        uses: docker/metadata-action@v3
        with:
          images: registry.gitlab.com/${{ env.DOCKER_USERNAME }}/encoders-docker/${{ matrix.name}}
          flavor: |
            latest=${{ github.ref == 'refs/heads/main' }}
          tags: |
            type=ref,event=branch,suffix=-{{date 'YYYYMMDD'}}
            type=schedule,pattern=-{{date 'YYYYMMDD'}}
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker
        id: login_docker
        env:
          DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}
        if: "${{ env.DOCKER_TOKEN != '' }}"
        uses: docker/login-action@v1
        with:
          registry: registry.gitlab.com
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build
        run: |
          sed -i 's/aomenc:latest/aomenc:'"${{ steps.create_latest.outputs.LATEST }}"'/g' Dockerfile.ffmpeg
          sed -i 's/svt-av1:latest/svt-av1:'"${{ steps.create_latest.outputs.LATEST }}"'/g' Dockerfile.ffmpeg
          sed -i 's/rav1e:latest/rav1e:'"${{ steps.create_latest.outputs.LATEST }}"'/g' Dockerfile.ffmpeg
          sed -i 's/x265:latest/x265:'"${{ steps.create_latest.outputs.LATEST }}"'/g' Dockerfile.ffmpeg
          sed -i 's/svt-hevc:latest/svt-hevc:'"${{ steps.create_latest.outputs.LATEST }}"'/g' Dockerfile.ffmpeg
          sed -i 's/x264:latest/x264:'"${{ steps.create_latest.outputs.LATEST }}"'/g' Dockerfile.ffmpeg
          sed -i 's/vpxenc:latest/vpxenc:'"${{ steps.create_latest.outputs.LATEST }}"'/g' Dockerfile.ffmpeg
          docker build --compress --pull \
            -f Dockerfile.${{ matrix.name }} \
            -t ${{ steps.docker_meta.outputs.tags }} \
            "$PWD"
      
      - name: Push
        if: "${{ steps.login_docker.outcome == 'success' }}"
        run: |
          docker push ${{ steps.docker_meta.outputs.tags }}
      
      #- name: Build
      #  id: build
      #  if: "${{ steps.docker_meta.outcome == 'skipped' }}"
      #  uses: docker/build-push-action@v2
      #  with:
      #    context: .
      #    file: ./Dockerfile.${{ matrix.name }}
      #    push: false
      #    tags: registry.gitlab.com/luigi311/encoders-docker/${{ matrix.name}}:static-latest
      
      #- name: Build Push
      #  id: build_push
      #  if: "${{ steps.docker_meta.outcome == 'success' }}"
      #  uses: docker/build-push-action@v2
      #  with:
      #    context: .
      #    file: ./Dockerfile
      #    push: false
      #    tags: ${{ steps.docker_meta.outputs.tags }}
      #    labels: ${{ steps.docker_meta.outputs.labels }}

      # Echo digest so users can validate their image
      #- name: Image digest
      #  if: "${{ steps.docker_meta.outcome == 'success' }}"
      #  run: echo "${{ steps.build_push.outputs.digest }}"
